generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN_FULL_PRIVILEGE_FOR_ALL_APP
  USER_SELLER_IS_ADMIN_FOR_HIS_TENANT
  USER_CLIENT
}

model User {
  id               String         @id @default(uuid())
  firstName        String
  lastName         String
  email            String         @unique
  password         String
  country          String?
  region           String?
  postalCode       String?
  city             String?
  addressOne       String?
  addressTwo       String?
  acceptTermsOfUse Boolean
  role             Role           @default(USER_CLIENT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tenant           Tenant?
  product          Product?
  tenantId         String?        @unique
  productId        String?        @unique
  UserCommande     UserCommande[]

  @@map("users")
}

model Tenant {
  id              String         @id @default(uuid())
  name            String         @unique
  url             String         @unique
  path            String         @unique
  iban            String
  email           String?
  phoneNumber     String?
  firstConnection Boolean
  user            User           @relation(fields: [userId], references: [id])
  product         Product?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String         @unique
  productId       String?        @unique
  UserCommande    UserCommande[]

  @@map("tenants")
}

model Product {
  id           String         @id @default(uuid())
  type         String
  name         String
  category     String
  description  String
  details      Details[]
  images       Image[]
  user         User           @relation(fields: [userId], references: [id])
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tenantId     String         @unique
  userId       String         @unique
  UserCommande UserCommande[]

  @@map("products")
}

model Image {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("images")
}

model Details {
  id        String  @id @default(uuid())
  idDetail  Int
  taille    String
  quantity  Int
  price     Int
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("details")
}

model UserCommande {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  userId     String?
  productId  String
  tenantId   String
  email      String
  name       String
  address    String
  country    String
  city       String
  zipCode    String
  totalPrice Int
  quantity   Int
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("userCommande")
}
